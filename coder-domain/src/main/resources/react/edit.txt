"use client";
import {SubmitHandler, useForm} from "react-hook-form";
import {valibotResolver} from "@hookform/resolvers/valibot";
import React from "react";
import ErrorMessage from "@/common/components/i18n/ErrorMessage";
import crateScheme from "@/schema/$persistence_object_by_horizontal";
import {Button} from "@/components/ui/button";
import {DialogClose, DialogDescription, DialogFooter, DialogHeader, DialogTitle} from "@/components/ui/dialog";
import $persistence_class_nameApi from "@/api/auto/$persistence_object_by_horizontal";
import toast from "react-hot-toast";
import {RowEditProps} from "@/common/lib/table/DataTableProperty";
import {ValidatableInput} from "@/common/components/forms/ValidatableInput";
import {useTranslations} from "next-intl";
import * as v from "valibot";

export default function EditPage({id,cellContext}: RowEditProps) {
     const globalTranslate = useTranslations("GlobalForm");
        const errorTranslate = useTranslations("$persistence_class_name.ErrorMessage")
        const pageTranslate = useTranslations("$persistence_class_name")
        const validateTranslate = useTranslations("$persistence_class_name.validate")
        const FormSchema = crateScheme(validateTranslate);
        type FormData = v.InferOutput<typeof FormSchema>;
        const original = cellContext.row.original;


    const onSubmit: SubmitHandler<FormData> = (
        data: FormData,
        event: React.BaseSyntheticEvent | undefined
    ) => {
        alert(id);
        $persistence_class_nameApi.save(data, errorTranslate).then(
            (res) => {
                toast.success("操作成功！");
            }
        ).catch(()=>{});
    };

    const {
        register,
        handleSubmit,
        control,
        formState: {
            errors,
            isSubmitted,
            touchedFields
        },
    } = useForm<FormData>({
        //相当于v.parse
        resolver: valibotResolver(
            FormSchema,
            //https://valibot.dev/guides/parse-data/
            {abortEarly: false, lang: "zh-CN"}
        ),
    });


    // formState.errors;
    return (
        //正确
        <form onSubmit={handleSubmit(onSubmit)}>
            <DialogHeader>
                <DialogTitle>{globalTranslate("edit")}</DialogTitle>
                <DialogDescription>

                </DialogDescription>
            </DialogHeader>
            <div className="flex flex-col">
                $frontend_edit_form_items
            </div>
           <DialogFooter>
                                       <DialogClose asChild>
                                           <Button variant="outline">{globalTranslate("cancel")}</Button>
                                       </DialogClose>
                                       <Button type="submit">{globalTranslate("save")}</Button>
                        </DialogFooter>
        </form>
    );
};
