overwrite
"use client";
import {SubmitHandler, useForm} from "react-hook-form";
import {valibotResolver} from "@hookform/resolvers/valibot";
import React from "react";
import crateScheme from "@/schema/$persistence_object_by_horizontal";
import {Button} from "@/components/ui/button";
import {DialogClose, DialogDescription, DialogFooter, DialogHeader, DialogTitle} from "@/components/ui/dialog";
import $persistence_class_nameApi from "@/api/auto/$persistence_object_by_horizontal";
import toast from "react-hot-toast";
import * as v from "valibot";
import {useTranslations} from "next-intl";
$frontend_edit_import
import {TableOperationProps,MyTableMeta} from "@/common/lib/table/DataTableProperty";
import {$persistence_class_name} from "@/components/$persistence_object_by_horizontal/columns";
import useNavigating from "@/common/hook/NavigatingHook";




export default function Page({callbackHandler, table}: TableOperationProps<$persistence_class_name>) {
    const globalTranslate = useTranslations("GlobalForm");
    const errorTranslate = useTranslations("$persistence_class_name.ErrorMessage")
    const pageTranslate = useTranslations("$persistence_class_name")
    const validateTranslate = useTranslations("$persistence_class_name.validate")

    const FormSchema = crateScheme(validateTranslate);
    type FormData = v.InferOutput<typeof FormSchema>;
    const meta = table.options.meta as MyTableMeta<$persistence_class_name>;
    const  Navigations=useNavigating();



    const onSubmit: SubmitHandler<FormData> = (
        data: FormData,
        event: React.BaseSyntheticEvent | undefined
    ) => {
        $persistence_class_nameApi.save(data, errorTranslate,Navigations.redirectToLogin).then(
            (res) => {
                callbackHandler();
                toast.success(globalTranslate("save")+globalTranslate("operation-success"));
            }
        ).catch(()=>{});
    };

    const {
        register,
        handleSubmit,
        control,
        setValue,
        getValues,
        formState: {
            errors,
            isSubmitted,
            touchedFields
        },
    } = useForm<FormData>({
        //相当于v.parse
        resolver: valibotResolver(
            FormSchema,
            //https://valibot.dev/guides/parse-data/
            {abortEarly: false, lang: "zh-CN"}
        ),
    });


    return (
            <form className={"h-[calc(100vh-80px)] flex flex-col"} onSubmit={handleSubmit(onSubmit)}>
                                   <DialogHeader>
                                       <DialogTitle>{globalTranslate("add")}</DialogTitle>
                                       <DialogDescription>
                                       </DialogDescription>
                                   </DialogHeader>
            <div className="min-h-0 flex-1 flex-col overflow-y-scroll">
                $frontend_add_form_items
            </div>
             <DialogFooter>
                            <DialogClose asChild>
                                <Button variant="outline">{globalTranslate("cancel")}</Button>
                            </DialogClose>
                            <Button type="submit">{globalTranslate("save")}</Button>
             </DialogFooter>
        </form>
    );
};
